package com.test.threading;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class ProducerConsumerShared {
	
	public static void main(String[] args) {
		BlockingQueue blockingQueue = new LinkedBlockingQueue();
		Producer producer = new Producer(blockingQueue);
		Consumer consumer = new Consumer(blockingQueue);
		
		Thread thread1 = new Thread(producer);
		Thread thread2 = new Thread(consumer);
		
		thread1.start();
		thread2.start();
	}
}

package com.test.threading;

import java.util.concurrent.BlockingQueue;

public class Producer implements Runnable{

	private final BlockingQueue blockingQueue;
	
	
	public Producer(BlockingQueue blockingQueue) {
		this.blockingQueue = blockingQueue;
	}
	
	@Override
	public void run() {
		
		
		for(int i=0; i<20;i++){
			try {
				blockingQueue.put(i);
				System.out.println("Produced"+ i);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
	}

	
}


package com.test.threading;

import java.util.concurrent.BlockingQueue;

public class Consumer implements Runnable{

	
	private final BlockingQueue blockingQueue;
	
	public Consumer(BlockingQueue blockingQueue) {
		this.blockingQueue = blockingQueue;
	}
	
	@Override
	public void run() {
		while(true){
			try {
				System.out.println("Consumed : "+blockingQueue.take());
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}

	
}
